/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kafka.producer;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import reactor.core.publisher.Flux;
import reactor.kafka.sender.KafkaSender;
import reactor.kafka.sender.SenderOptions;
import reactor.kafka.sender.SenderRecord;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

public class App {

    private static final ObjectMapper mapper =new ObjectMapper();
    private static final Random random = new Random();

    public enum Keys {
        KEY1, KEY2, KEY3, KEY4, KEY5,
        KEY6, KEY7, KEY8, KEY9, KEY10
    }

    public static void main(String[] args) {

        String topic = System.getenv("KAFKA_TOPIC");
        String bootstrapServers = System.getenv("KAFKA_BOOTSTRAP_SERVERS");
        if (topic == null || topic.isEmpty()) {
            throw new IllegalStateException("KAFKA_TOPIC environment variable must be set");
        }

        if (bootstrapServers == null || bootstrapServers.isEmpty()) {
            throw new IllegalStateException("KAFKA_BOOTSTRAP_SERVERS environment variable must be set");
        }

        Map<String, Object> props = new HashMap<>();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);

        SenderOptions<String, String> senderOptions = SenderOptions.create(props);

        KafkaSender<String, String> sender = KafkaSender.create(senderOptions);

        sender.send(Flux.range(1, 500000)
                        .map(i -> SenderRecord.create(new ProducerRecord<>(topic, getRandomEnumValue().name(),getObject(i)), i)))
                .doOnNext(r -> System.out.println("Message sent with key: " + r.correlationMetadata()))
                .blockLast();

        sender.close();
        System.exit(0);
    }

    public static String getObject(Integer index)
    {
        ObjectNode jsonObject = mapper.createObjectNode();
        jsonObject.put("key", UUID.randomUUID().toString());
        jsonObject.put("index", index);
        return jsonObject.toString();
    }

    public static Keys getRandomEnumValue() {
        Keys[] enumValues = Keys.values();
        int randomIndex = random.nextInt(enumValues.length);
        return enumValues[randomIndex];
    }
}
